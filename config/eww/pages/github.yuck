(defpoll gh-user-info
  :interval "3600s"
  :initial '{"name":"","login":"","email":""}'
  ; name: displayed name, login: actual name, email is optional
  `~/dots/config/eww/sh/github.sh user_info`)
(defpoll gh-avatar ; the path to the avatar image
  :interval "3s" ; the script will just return the path to the image
  :initial ''    ; most of the time so this is nothing too expensive
  `~/dots/config/eww/sh/github.sh avatar`)
(defpoll gh-ctrb
  :interval "3600s"
  :initial "[]"
  `~/dots/config/eww/sh/github.sh contrib`)
(defpoll gh-notifs
  :interval "60s"
  :initial '{"read":[],"unread":[]}'
  `~/dots/config/eww/sh/github.sh notifications`)

; wether the reload button should be displayed
(defvar gh-reload-avatar false)
; [keepalive] only here to tell how long the transition should take to scripts
; HAS to be in miliseconds without a suffix
(defvar GH_CTRB_TRANSITION_DURATION "250")
(defvar gh-ctrb-transition-duration "250ms") ; should match above 
(defvar gh-ctrb-transition "slideleft")
(defvar gh-ctrb-reveal "center") ; which week to show: "left", "center" or "right"
(defvar gh-ctrb-week 0) ; the currently displayed week, 0 is nonw, 1 ... n is n weeks ago, up to a year
(defvar gh-ctrb-week-left 1) ; left (hidden) week
(defvar gh-ctrb-week-right 1) ; right (hidden) week
(defvar gh-ctrb-day-current 0) ; the currently selected day
(defvar gh-ctrb-day-data '{"data":[],"length":0}') ; json data about all thats been done that day

(defwidget github-page [index]
  (bpage :index index
    (box :orientation "v"
      :hexpand true
      :space-evenly false
      :class "gh_page"

      ; AVATAR / NAME
      (box :space-evenly false
        :class "gh_header"
        (button :onclick "eww update gh-reload-avatar=${!gh-reload-avatar}"
          (box :style "background-image: url('${gh-avatar}')"
            :class "gh_avatar"))
        (box :orientation "v"
          :space-evenly false
          :hexpand true
          (revealer :reveal {! gh-reload-avatar}
            :transition "slidedown"
            :duration "250ms"
            (box 
              :orientation "v"
              :halign "center"
              :class "gh_name"
              (label :text {gh-user-info.name})
              (label :text {gh-user-info.login}
                :class "text_secondary")))
          (revealer :reveal {gh-reload-avatar}
            :transition "slidedown"
            :duration "250ms"
            :hexpand true
            (box :class "gh_reload_avatar_wrap"
              :space-evenly false
              :halign "center"
              (button :onclick `rm ${gh-avatar}; eww update gh-avatar=''; eww update gh-avatar=$(~/dots/config/eww/sh/github.sh avatar)`
                :valign "center"
                "󰑓 Avatar")))))
      ; WEEKS
      (box :space-evenly false
        :hexpand true
        (revealer :duration gh-ctrb-transition-duration
          :transition "slideright"
          :reveal {gh-ctrb-reveal == "left"}
          (contrib-week :week gh-ctrb-week-left))
        (revealer :duration gh-ctrb-transition-duration
          :transition {gh-ctrb-transition}
          :reveal {gh-ctrb-reveal == "center"}
          (contrib-week :week gh-ctrb-week))
        (revealer :duration gh-ctrb-transition-duration
          :transition "slideleft"
          :reveal {gh-ctrb-reveal == "right"}
          (contrib-week :week gh-ctrb-week-right)))
      (box :class "gh_day_info"
        :space-evenly false
        :orientation "v"
        (contrib-node :index 0)
        (contrib-node :index 1)
        (contrib-node :index 2)
        (contrib-node :index 3)
        (revealer :duration "100ms"
          :transition "slideup"
          :reveal {gh-ctrb-day-data.length > 4}
          (contrib-node-more)))
      (box :class "gh_day_date"
        (box :class "gh-line"
          :valign "center")
        "${replace(gh-ctrb.data[gh-ctrb-week][gh-ctrb-day-current].date, "-", "/")}"
        (box :class "gh-line"
          :valign "center"))
      (scroll :class "gh_notif_scroll"
        :hscroll false
        :style "min-height:${170 + (5 - (gh-ctrb-day-data.length == 0 ? 1 : gh-ctrb-day-data.length)) * 35}px;"
        (box :orientation "v"
          :space-evenly false
          ; IDK why, but this box is necessary
          (box :orientation "v"
            :space-evenly false
            (for notif in {gh-notifs.unread}
              (notif :notif notif)))
          (revealer :reveal {length(gh-notifs.unread) != 0}
            :duration "0s"
            :transition "slideup"
            (box :space-evenly false
              :class "gh_notif_sep_wrap"
              (box :class "gh_notif_sep" :hexpand true :valign "center")
              (label :text "read")
              (box :class "gh_notif_sep" :hexpand true :valign "center")))
          (box :orientation "v"
            :space-evenly false
            (for notif in {gh-notifs.read}
              (notif :notif notif)))
          (box :space-evenly false
            :class "gh_notif_sep_wrap"
            (box :class "gh_notif_sep" :hexpand true :valign "center")
            (link :href "https://github.com/notifications" "more")
            (box :class "gh_notif_sep" :hexpand true :valign "center"))
          )))))
(defwidget notif [notif]
  (box :space-evenly false
    :class "gh_notif ${notif.unread ? "" : "read"}"
    :orientation "v"
    (box :orientation "h"
      :space-evenly false
      :hexpand true
      :class "top ${
          notif.subject.type == "PullRequest" ? "pullreq" :
          notif.subject.type == "Issue" ? "issue" :
          notif.subject.type == "Commit" ? "commit" :
          "other"
        }"
      (icon :icon "${
          notif.subject.type == "PullRequest" ? "󰓂" :
          notif.subject.type == "Issue" ? "󰗖" :
          notif.subject.type == "Commit" ? "󰜘" :
          "󰂜"
        }"
        :valign "start")
      (box :halign "start"
        :hexpand true
        :class "reason"
        (link :href {notif.repo_url} {replace(notif.reason, "_", " ")}))
      (label :halign "end"
        :text {substr(notif.date, 11, 5)}))
    (box :space-evenly false
      (label :class "title"
        :text "${notif.subject.title}"
        :wrap true
        :hexpand true
        :halign "start")
      (revealer :reveal {notif.unread}
        (eventbox :class "read"
          :cursor "pointer"
          (button :valign "end"
            :timeout "6s"
            :onclick `~/dots/config/eww/sh/github.sh read_notif ${notif.id}`
            (icon :icon "󰄬")))))))

(defwidget contrib-node [index]
  (revealer :transition "slideup"
    :duration "100ms"
    :reveal {gh-ctrb-day-data.length > index || (index == gh-ctrb-day-data.length && index == 0)}
    (literal 
      :class "gh_ctrb_node_lit ${
        gh-ctrb-day-data.length - 1 == index || ; IF this node has the last content
        (index == gh-ctrb-day-data.length && index == 0) ? ; OR this node is the only one and there is no content
        "last" : ""
      } ${index == 0 ? "first" : ""}"
      :content {
        gh-ctrb-day-data.length > index ?
          "(contrib-node-${replace(gh-ctrb-day-data.data[index].type, "_", "-")} :contrib `${replace(gh-ctrb-day-data.data[index], "`", "'")}`)" :
          "(contrib-node-empty)"})))

(defwidget repo-link [repo]
  (link :href {repo.url}
    {length(repo.name) > 12 ? "${replace(repo.name, "^(.{11}).+$", "\\1")}…" : repo.name}))

(defwidget contrib-node-empty []
  (box :class "gh_ctrb_node empty"
    :space-evenly false
    (icon :icon "󰂭")
    (box :class "content"
      :space-evenly false
      "Nothing on that day")))

(defwidget contrib-node-more []
  (box :class "gh_ctrb_node_lit last"
    (box :class "gh_ctrb_node empty"
      :space-evenly false
      (icon :icon "…")
      (box :class "content"
        :space-evenly false
        "And more !"))))

(defwidget contrib-node-commits [contrib]
  (box :class "gh_ctrb_node commit"
    :space-evenly false
    (icon :icon "󰜘")
    (box :class "content"
      :space-evenly false
      "pushed ${contrib.commitCount > 1 ? contrib.commitCount : "a"} commit${contrib.commitCount > 1 ? "s" : ""} to "
      (repo-link :repo "${contrib.repository}"))))

(defwidget contrib-node-issues [contrib]
  (box :class "gh_ctrb_node issue"
    :space-evenly false
    (icon :icon "󰗖")
    (box :class "content"
      :space-evenly false
      "opened issue "
      (link :href "${contrib.url}"
        "#${contrib.number} ")
      " on "
      (repo-link :repo "${contrib.repository}"))))

(defwidget contrib-node-repositories [contrib]
  (box :class "gh_ctrb_node repo"
    :space-evenly false
    (icon :icon "${contrib.isFork ? "󰓁" : "󰭤"}")
    (box :class "content"
      :space-evenly false
      "${contrib.isFork ? "forked " : "created new repo "}"
      (literal :content {contrib.isFork ? `(link :href "${contrib.parent.url}" " ${contrib.parent.owner.login}/${contrib.parent.name} ")` : ``})
      (literal :content {contrib.isFork ? `(label :text " to ")` : ``})
      (repo-link :repo "${contrib}"))))

(defwidget contrib-node-pull-requests [contrib]
  (box :class "gh_ctrb_node pr"
    :space-evenly false
    (icon :icon "󰓂")
    (box :class "content"
      :space-evenly false
      "opened PR "
      (link :href "${contrib.url}"
        "#${contrib.number} ")
      " on "
      (repo-link :repo "${contrib.repository}"))))
(defwidget contrib-node-pull-requests-reviews [contrib]
  (box :class "gh_ctrb_node prrev"
    :space-evenly false
    (icon :icon "${
      contrib.state == "APPROVED" ? "󱓏" :
      contrib.state == "CHANGES_REQUESTED" ? "󱓊" :
      contrib.state == "COMMENTED" ? "󰘬" :
      contrib.state == "DISMISSED" ? "󱓌" :
      contrib.state == "PENDING" ? "󱓎" : "󰘬"
      }")
    (box :class "content"
      :space-evenly false
      (link :href "${contrib.url}"
      "${
        contrib.state == "APPROVED" ? "approved of" :
        contrib.state == "CHANGES_REQUESTED" ? "reviewed" :
        contrib.state == "COMMENTED" ? "commented on" :
        contrib.state == "DISMISSED" ? "dismissed" :
        "reviewed"
      } ")
      (repo-link :repo "${contrib.pullRequest.repository}")
      "/"
      (link :href "${contrib.pullRequest.url}"
        "${contrib.pullRequest.number}"))))

(defwidget contrib-week [week]
  (box :orientation "v"
    :space-evenly false
    :class "gh_week"
    (centerbox :orientation "h"
      (button :onclick `~/dots/config/eww/sh/ctrb.sh previous`
        :halign "start"
        (icon :icon "󰅁"
          :secondary {week > (gh-ctrb.length - 2)}))
      (label :text "${week == 0 ? "this week" : week == 1 ? "last week" : "${week} weeks ago"}"
        :halign "center")
      (button :onclick `~/dots/config/eww/sh/ctrb.sh next`
        :halign "end"
        (icon :icon "󰅂"
          :secondary {week == 0})))
    (space-small)
    (box :space-evenly false
      (contrib-day :date {gh-ctrb.data[week][0].date} :contrib {gh-ctrb.data[week][0].contributionCount} :index 0)
      (contrib-day :date {gh-ctrb.data[week][1].date} :contrib {gh-ctrb.data[week][1].contributionCount} :index 1)
      (contrib-day :date {gh-ctrb.data[week][2].date} :contrib {gh-ctrb.data[week][2].contributionCount} :index 2)
      (contrib-day :date {gh-ctrb.data[week][3].date} :contrib {gh-ctrb.data[week][3].contributionCount} :index 3)
      (contrib-day :date {gh-ctrb.data[week][4].date} :contrib {gh-ctrb.data[week][4].contributionCount} :index 4)
      (contrib-day :date {gh-ctrb.data[week][5].date} :contrib {gh-ctrb.data[week][5].contributionCount} :index 5)
      (contrib-day :date {gh-ctrb.data[week][6].date} :contrib {gh-ctrb.data[week][6].contributionCount} :index 6))
  ))
(defwidget contrib-day [index contrib date]
  (button 
    :onclick "~/dots/config/eww/sh/ctrb.sh day ${index}"
    :active true
    :valign "center"
    :class "contrib_day contrib_day_${contrib} ${gh-ctrb-day-current == index ? "focused" : ""}"))
